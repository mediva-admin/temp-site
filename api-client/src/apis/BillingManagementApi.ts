/* tslint:disable */
/* eslint-disable */
/**
 * Mediva API
 * Specification of the Mediva API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@mediva.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BillingResponse,
  ErrorResponse,
  ModelApiResponse,
  SendBillThroughWhatsappRequest,
  UpdateBillingRequest,
} from '../models/index';

export interface GetBillingByFlowHistoryIdRequest {
    flowHistoryId: number;
}

export interface GetBillingByFlowIdRequest {
    flowId: string;
}

export interface GetBillingsByPatientIdRequest {
    patientId: number;
}

export interface SendBillThroughWhatsappOperationRequest {
    sendBillThroughWhatsappRequest: SendBillThroughWhatsappRequest;
}

export interface UpdateBillingOperationRequest {
    billingId: number;
    updateBillingRequest: UpdateBillingRequest;
}

/**
 * BillingManagementApi - interface
 * 
 * @export
 * @interface BillingManagementApiInterface
 */
export interface BillingManagementApiInterface {
    /**
     * Retrieves billing information for a specific flow history ID. Returns a list of billing records associated with the given flow history. 
     * @summary Get billing for flow history ID
     * @param {number} flowHistoryId Flow history ID to get billing for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingManagementApiInterface
     */
    getBillingByFlowHistoryIdRaw(requestParameters: GetBillingByFlowHistoryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BillingResponse>>>;

    /**
     * Retrieves billing information for a specific flow history ID. Returns a list of billing records associated with the given flow history. 
     * Get billing for flow history ID
     */
    getBillingByFlowHistoryId(flowHistoryId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BillingResponse>>;

    /**
     * Retrieves billing information for a specific flow ID. Returns a list of billing records associated with the given flow. 
     * @summary Get billing for flow ID
     * @param {string} flowId Flow ID to get billing for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingManagementApiInterface
     */
    getBillingByFlowIdRaw(requestParameters: GetBillingByFlowIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BillingResponse>>>;

    /**
     * Retrieves billing information for a specific flow ID. Returns a list of billing records associated with the given flow. 
     * Get billing for flow ID
     */
    getBillingByFlowId(flowId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BillingResponse>>;

    /**
     * Retrieves all billing records for the current hospital. Hospital ID is automatically extracted from the request context. Returns a list of all billing records for the hospital. 
     * @summary Get all billings for hospital
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingManagementApiInterface
     */
    getBillingsByHospitalRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BillingResponse>>>;

    /**
     * Retrieves all billing records for the current hospital. Hospital ID is automatically extracted from the request context. Returns a list of all billing records for the hospital. 
     * Get all billings for hospital
     */
    getBillingsByHospital(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BillingResponse>>;

    /**
     * Retrieves all billing records for a specific patient ID. Returns a list of all billing records associated with the given patient. 
     * @summary Get all billings for patient ID
     * @param {number} patientId Patient ID to get billings for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingManagementApiInterface
     */
    getBillingsByPatientIdRaw(requestParameters: GetBillingsByPatientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BillingResponse>>>;

    /**
     * Retrieves all billing records for a specific patient ID. Returns a list of all billing records associated with the given patient. 
     * Get all billings for patient ID
     */
    getBillingsByPatientId(patientId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BillingResponse>>;

    /**
     * Send bill through whatsapp 
     * @summary Send bill through whatsapp
     * @param {SendBillThroughWhatsappRequest} sendBillThroughWhatsappRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingManagementApiInterface
     */
    sendBillThroughWhatsappRaw(requestParameters: SendBillThroughWhatsappOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>>;

    /**
     * Send bill through whatsapp 
     * Send bill through whatsapp
     */
    sendBillThroughWhatsapp(sendBillThroughWhatsappRequest: SendBillThroughWhatsappRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse>;

    /**
     * Updates a billing record with billing items and payment method. This API is used to complete the billing process by adding services/items and processing payment. The billing status will be updated to PAID if payment is processed successfully. 
     * @summary Update billing with items and payment method
     * @param {number} billingId ID of the billing to update
     * @param {UpdateBillingRequest} updateBillingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingManagementApiInterface
     */
    updateBillingRaw(requestParameters: UpdateBillingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingResponse>>;

    /**
     * Updates a billing record with billing items and payment method. This API is used to complete the billing process by adding services/items and processing payment. The billing status will be updated to PAID if payment is processed successfully. 
     * Update billing with items and payment method
     */
    updateBilling(billingId: number, updateBillingRequest: UpdateBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingResponse>;

}

/**
 * 
 */
export class BillingManagementApi extends runtime.BaseAPI implements BillingManagementApiInterface {

    /**
     * Retrieves billing information for a specific flow history ID. Returns a list of billing records associated with the given flow history. 
     * Get billing for flow history ID
     */
    async getBillingByFlowHistoryIdRaw(requestParameters: GetBillingByFlowHistoryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BillingResponse>>> {
        if (requestParameters['flowHistoryId'] == null) {
            throw new runtime.RequiredError(
                'flowHistoryId',
                'Required parameter "flowHistoryId" was null or undefined when calling getBillingByFlowHistoryId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/billing/flow-history/{flowHistoryId}`;
        urlPath = urlPath.replace(`{${"flowHistoryId"}}`, encodeURIComponent(String(requestParameters['flowHistoryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves billing information for a specific flow history ID. Returns a list of billing records associated with the given flow history. 
     * Get billing for flow history ID
     */
    async getBillingByFlowHistoryId(flowHistoryId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BillingResponse>> {
        const response = await this.getBillingByFlowHistoryIdRaw({ flowHistoryId: flowHistoryId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves billing information for a specific flow ID. Returns a list of billing records associated with the given flow. 
     * Get billing for flow ID
     */
    async getBillingByFlowIdRaw(requestParameters: GetBillingByFlowIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BillingResponse>>> {
        if (requestParameters['flowId'] == null) {
            throw new runtime.RequiredError(
                'flowId',
                'Required parameter "flowId" was null or undefined when calling getBillingByFlowId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/billing/flow/{flowId}`;
        urlPath = urlPath.replace(`{${"flowId"}}`, encodeURIComponent(String(requestParameters['flowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves billing information for a specific flow ID. Returns a list of billing records associated with the given flow. 
     * Get billing for flow ID
     */
    async getBillingByFlowId(flowId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BillingResponse>> {
        const response = await this.getBillingByFlowIdRaw({ flowId: flowId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all billing records for the current hospital. Hospital ID is automatically extracted from the request context. Returns a list of all billing records for the hospital. 
     * Get all billings for hospital
     */
    async getBillingsByHospitalRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BillingResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/billing/hospital`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all billing records for the current hospital. Hospital ID is automatically extracted from the request context. Returns a list of all billing records for the hospital. 
     * Get all billings for hospital
     */
    async getBillingsByHospital(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BillingResponse>> {
        const response = await this.getBillingsByHospitalRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all billing records for a specific patient ID. Returns a list of all billing records associated with the given patient. 
     * Get all billings for patient ID
     */
    async getBillingsByPatientIdRaw(requestParameters: GetBillingsByPatientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BillingResponse>>> {
        if (requestParameters['patientId'] == null) {
            throw new runtime.RequiredError(
                'patientId',
                'Required parameter "patientId" was null or undefined when calling getBillingsByPatientId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/billing/patient/{patientId}`;
        urlPath = urlPath.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters['patientId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all billing records for a specific patient ID. Returns a list of all billing records associated with the given patient. 
     * Get all billings for patient ID
     */
    async getBillingsByPatientId(patientId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BillingResponse>> {
        const response = await this.getBillingsByPatientIdRaw({ patientId: patientId }, initOverrides);
        return await response.value();
    }

    /**
     * Send bill through whatsapp 
     * Send bill through whatsapp
     */
    async sendBillThroughWhatsappRaw(requestParameters: SendBillThroughWhatsappOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters['sendBillThroughWhatsappRequest'] == null) {
            throw new runtime.RequiredError(
                'sendBillThroughWhatsappRequest',
                'Required parameter "sendBillThroughWhatsappRequest" was null or undefined when calling sendBillThroughWhatsapp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/billing/send-report`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['sendBillThroughWhatsappRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Send bill through whatsapp 
     * Send bill through whatsapp
     */
    async sendBillThroughWhatsapp(sendBillThroughWhatsappRequest: SendBillThroughWhatsappRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.sendBillThroughWhatsappRaw({ sendBillThroughWhatsappRequest: sendBillThroughWhatsappRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Updates a billing record with billing items and payment method. This API is used to complete the billing process by adding services/items and processing payment. The billing status will be updated to PAID if payment is processed successfully. 
     * Update billing with items and payment method
     */
    async updateBillingRaw(requestParameters: UpdateBillingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingResponse>> {
        if (requestParameters['billingId'] == null) {
            throw new runtime.RequiredError(
                'billingId',
                'Required parameter "billingId" was null or undefined when calling updateBilling().'
            );
        }

        if (requestParameters['updateBillingRequest'] == null) {
            throw new runtime.RequiredError(
                'updateBillingRequest',
                'Required parameter "updateBillingRequest" was null or undefined when calling updateBilling().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/billing/update-billing/{billingId}`;
        urlPath = urlPath.replace(`{${"billingId"}}`, encodeURIComponent(String(requestParameters['billingId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['updateBillingRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a billing record with billing items and payment method. This API is used to complete the billing process by adding services/items and processing payment. The billing status will be updated to PAID if payment is processed successfully. 
     * Update billing with items and payment method
     */
    async updateBilling(billingId: number, updateBillingRequest: UpdateBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingResponse> {
        const response = await this.updateBillingRaw({ billingId: billingId, updateBillingRequest: updateBillingRequest }, initOverrides);
        return await response.value();
    }

}
