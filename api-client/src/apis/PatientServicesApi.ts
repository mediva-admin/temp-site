/* tslint:disable */
/* eslint-disable */
/**
 * Mediva API
 * Specification of the Mediva API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@mediva.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
} from '../models/index';

/**
 * PatientServicesApi - interface
 * 
 * @export
 * @interface PatientServicesApiInterface
 */
export interface PatientServicesApiInterface {
    /**
     * Retrieves all available services from the system. Returns a list of services with their names, prices, and categories. 
     * @summary Get all available services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientServicesApiInterface
     */
    getAllServicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<string>>>>;

    /**
     * Retrieves all available services from the system. Returns a list of services with their names, prices, and categories. 
     * Get all available services
     */
    getAllServices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<string>>>;

}

/**
 * 
 */
export class PatientServicesApi extends runtime.BaseAPI implements PatientServicesApiInterface {

    /**
     * Retrieves all available services from the system. Returns a list of services with their names, prices, and categories. 
     * Get all available services
     */
    async getAllServicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("http-bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/patient/get-all-services`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves all available services from the system. Returns a list of services with their names, prices, and categories. 
     * Get all available services
     */
    async getAllServices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Array<string>>> {
        const response = await this.getAllServicesRaw(initOverrides);
        return await response.value();
    }

}
